{"ast":null,"code":"var _jsxFileName = \"/Users/vyacheslavsokolov/Dropbox/react-projects/crud/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport UserTable from './components/UserTable';\n\nfunction App() {\n  const instance = axios.create({\n    baseURL: 'http://178.128.196.163:3000/api/'\n  });\n  const [users, setUsers] = useState([]);\n  const [editing, setEditing] = useState(false);\n  const [currentUser, setCurrentUser] = useState([]);\n  React.useEffect(() => {\n    instance.get('records').then(response => setUsers(response.data));\n  }, []);\n\n  const deleteUser = id => {\n    setEditing(false);\n    instance.delete(`records/${id}`);\n    setUsers(users.filter(user => user._id !== id));\n  };\n\n  const addUser = (userName, userSurname) => {\n    if (userName && userSurname) {\n      const newUser = {\n        \"data\": {\n          \"name\": userName,\n          \"surname\": userSurname\n        }\n      };\n      instance.put('records', {\n        \"data\": {\n          \"name\": userName,\n          \"surname\": userSurname\n        }\n      }).then(() => {\n        alert('Пользователь добавлен');\n      });\n      setUsers([...users, newUser]);\n    } else {\n      alert('Введите данные!');\n    }\n  };\n\n  const editRow = user => {\n    setEditing(true);\n    setCurrentUser({\n      \"_id\": user.id,\n      \"data\": {\n        \"name\": user.name,\n        \"surname\": user.surname\n      }\n    });\n  }; // const updateUser = (id, updatedUser) => {\n  //     // когда мы готовы обновить пользователя, ставим флажок editing в false\n  //     setEditing(false)\n  //     // и обновляем пользователя, если нашли его по id\n  //     setUsers(users.map(user => (user.id === id ? updatedUser : user)))\n  // }\n  // запрос на обновление данных\n\n\n  const updateUser = (id, name, surname) => {\n    console.log(users);\n    const updatedUser = {\n      \"id\": id,\n      \"data\": {\n        \"name\": name,\n        \"surname\": surname\n      }\n    };\n    setEditing(false);\n    setUsers(users.map(user => user._id === id ? updatedUser : user)); // instance.post(`records/${id}`, {\"data\": {\"name\": name, \"surname\": surname}})\n    //     .then(() => alert('Данные пользователя обновлены'))\n  }; // редактирование пользователя\n  // const editRow = user => {\n  //     // готовы редактировать - флажок в true\n  //     setEditing(true)\n  //     // устанавливаем значения полей для формы редактирования\n  //     // на основании выбранного \"юзера\"\n  //     setCurrentUserName({ _id: user._id, data: {name: user.name, username: user.username })\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserTable, {\n    setUsers: setUsers,\n    users: users,\n    deleteUser: deleteUser,\n    addUser: addUser,\n    updateUser: updateUser,\n    editing: editing,\n    setEditing: setEditing,\n    editRow: editRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vyacheslavsokolov/Dropbox/react-projects/crud/src/App.js"],"names":["React","useState","axios","UserTable","App","instance","create","baseURL","users","setUsers","editing","setEditing","currentUser","setCurrentUser","useEffect","get","then","response","data","deleteUser","id","delete","filter","user","_id","addUser","userName","userSurname","newUser","put","alert","editRow","name","surname","updateUser","console","log","updatedUser","map"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport UserTable from './components/UserTable';\n\nfunction App (){\n    const instance = axios.create({\n        baseURL: 'http://178.128.196.163:3000/api/',\n    })\n\n    const [users, setUsers] = useState([])\n    const [editing, setEditing] = useState(false)\n    const [currentUser, setCurrentUser] =  useState([])\n\n    React.useEffect(() => {\n        instance.get('records')\n            .then(response => setUsers(response.data))\n    }, [])\n\n    const deleteUser = (id) => {\n        setEditing(false)\n        instance.delete(`records/${id}`)\n        setUsers(users.filter(user => user._id !== id))\n    }\n    const addUser = (userName, userSurname) => {\n        if (userName && userSurname) {\n            const newUser = {\n                \"data\": {\n                    \"name\": userName,\n                    \"surname\": userSurname,\n                }\n            }\n            instance.put('records', {\"data\": {\"name\": userName, \"surname\": userSurname}})\n                .then(() => {\n                    alert('Пользователь добавлен')\n                })\n            setUsers([...users, newUser])\n\n        } else {\n            alert('Введите данные!')\n        }\n    }\n\n    const editRow = (user) => {\n        setEditing(true)\n        setCurrentUser({\"_id\": user.id, \"data\": {\"name\": user.name, \"surname\": user.surname}})\n    }\n\n    // const updateUser = (id, updatedUser) => {\n    //     // когда мы готовы обновить пользователя, ставим флажок editing в false\n    //     setEditing(false)\n    //     // и обновляем пользователя, если нашли его по id\n    //     setUsers(users.map(user => (user.id === id ? updatedUser : user)))\n    // }\n\n    // запрос на обновление данных\n\n    const updateUser = (id, name, surname) => {\n        console.log(users)\n        const updatedUser = {\"id\": id,\"data\": {\"name\": name, \"surname\": surname}}\n        setEditing(false)\n        setUsers(users.map(user => user._id === id ? updatedUser : user))\n        // instance.post(`records/${id}`, {\"data\": {\"name\": name, \"surname\": surname}})\n        //     .then(() => alert('Данные пользователя обновлены'))\n    }\n\n    // редактирование пользователя\n    // const editRow = user => {\n    //     // готовы редактировать - флажок в true\n    //     setEditing(true)\n    //     // устанавливаем значения полей для формы редактирования\n    //     // на основании выбранного \"юзера\"\n    //     setCurrentUserName({ _id: user._id, data: {name: user.name, username: user.username })\n    // }\n\n    return (\n      <div className=\"App\">\n          <UserTable setUsers={setUsers} users={users} deleteUser={deleteUser}\n                     addUser={addUser} updateUser={updateUser} editing={editing} setEditing={setEditing}\n                     editRow={editRow}/>\n      </div>\n    )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}